
* 几个基本elisp帮助命令
    [c-h f]  #查看函数定义
    [c-h v] # 查看函数变量
             [c-h k] #查看绑定键对应的函数

* TAGS
            [M-.]  # 'find-tag 函数 可以用来查看函数的源码。
	    TAGS支持多种类型的文件，它甚至可以支持普通的文本文件。
	    TAGS通过 ‘tags tables’来记录你所标记的函数，变量以及相应的内容。
	    1) 设置方法（到指定目录下 编译生成 etags文件）
	       'M-x compile RET etags *.el RET
	    2) 指定TAGS目录
	       'M-x visit-tags-table
* 基本buffer函数学习
**  'goto-char #光标移动到指定位置
** 'point-min #当前buffer最小的位置
** 'point-max #当前buffer最大的位置
** 'push-mark   #在当前位置设置一个标记，这个标记将会被保存在标记环中（ring），以便返回。
** 'mark-whole-buffer #绑定键 [c-x h]
       函数完整的定义如下：
       (defun mark-whole-buffer ()
       "Put point at beginning and mark at end of buffer.
     You probably should not use this function in Lisp programs;
     it is usually a mistake for a Lisp function to use any subroutine
     that uses or sets the mark."
       (interactive)
       (push-mark (point))
       # 第二个参数 当执行pushmark时将会 显示 ’Mark set‘信息，第三个参数将会激活mark mode。
       (push-mark (point-max) nil t)   
       (goto-char (point-min)))
** 'append-to-buffer #它将复制区域内容从当前buffer到指定buffer
      (defun append-to-buffer (buffer start end)
       "Append to specified buffer the text of the region.
     It is inserted into that buffer before its point.

     When calling from a program, give three arguments:
     BUFFER (or buffer name), START and END.
     START and END specify the portion of the current buffer to be copied."
       (interactive
        (list (read-buffer "Append to buffer: " (other-buffer
                                                 (current-buffer) t))
              (region-beginning) (region-end)))
       (let ((oldbuf (current-buffer)))
         (save-excursion
           (let* ((append-to (get-buffer-create buffer))
                  (windows (get-buffer-window-list append-to t t))
                  point)
             (set-buffer append-to)
             (setq point (point))
             (barf-if-buffer-read-only)
             (insert-buffer-substring oldbuf start end)
             (dolist (window windows)
               (when (= (window-point window) point)
                 (set-window-point window (point))))))))
** 'save-excursion  #记录当前的缓存，标记（mark），光标位置（point），以在执行函数后还原原先的buffer状态(current buffer)。
           (save-excursion &rest BODY)  #BODY 中即为执行的函数
