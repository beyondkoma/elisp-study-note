*  一些较为复杂的Buffer函数
** 'copy-to-buffer
      × 函数主体如下
         (interactive "BCopy to buffer:\nr")
	 (let ((oldbuf (current-buffer)))
	   (with-current-buffer (get-buffer-create buffer)
	     (barf-if-buffer-read-only)
	     # 清除当前缓存内容
	     (erase-buffer)
	     (save-excursion
	       (insert-buffer-substring oldbuf start end))))
** 'insert-buffer
     * 函数主体如下
       (defun insert-buffer (buffer)
       "Insert after point the contents of BUFFER.
     Puts mark after the inserted text.
     BUFFER may be a buffer or a buffer name."
       (interactive "*bInsert buffer: ")
       (or (bufferp buffer)
           (setq buffer (get-buffer buffer)))
       (let (start end newmark)
         (save-excursion
           (save-excursion
             (set-buffer buffer)
             (setq start (point-min) end (point-max)))
           (insert-buffer-substring buffer start end)
           (setq newmark (point)))
         (push-mark newmark)))
	  * 'interactive 中×号作用是当被插入的缓存是只可读的话，那么emacs将会给出提示，该星号不需要用换行号隔开。b参数是要求一个已存在的buffer。
	  * 'or 保证参数buffer是一个货真价实存在的buffer，而不仅仅是一个buffer。or是或者的意思，相当于c语言中的|。
	  * 'save-excursion 两个excursion外部的还原current-buffer状态，内部的则还原 参数 buffer的状态。注意'save-excursion仅还原point和mark，缓存的内容是不需要还原的。'save-excursion的返回值为，列表中最后一个表达式所执行的结果。
** 'beginning-of-buffer
    * 函数主体如下
      (defun beginning-of-buffer (&optional arg)
       "Move point to the beginning of the buffer;
     leave mark at previous position.
     With \\[universal-argument] prefix,
     do not set mark at previous position.
     With numeric arg N,
     put point N/10 of the way from the beginning.

     If the buffer is narrowed,
     this command uses the beginning and size
     of the accessible part of the buffer.

     Don't use this command in Lisp programs!
     \(goto-char (point-min)) is faster
     and avoids clobbering the mark."
       (interactive "P")
       (or (consp arg)
           (and transient-mark-mode mark-active)
           (push-mark))
       (let ((size (- (point-max) (point-min))))
         (goto-char (if (and arg (not (consp arg)))
                        (+ (point-min)
                           (if (> size 10000)
                               ;; Avoid overflow for large buffer sizes!
                               (* (prefix-numeric-value arg)
                                  (/ size 10))
                             (/ (+ 10 (* size (prefix-numeric-value arg)))
                                10)))
                      (point-min))))
       (if arg (forward-line 1)))

    * &optional 是一个关键字，当参数前出现这个关键字时，我们可以不向函数传递对应的参数。
    * (interactive "P") P指raw 前缀参数。
    * 'prefix-numeric-value 从rawzhong获取数值。
    * 'consp 检查参数是否是以二个 cons cell（list表结构）。
    * '(and transient-mark-mode mark-active)  激活标记模式（minor）。
    * '(forward-line 1) 光标向前移动一行
    * 
    *
** 'optional Exercise
*** 1.
      (defun optionalFunc (&optional arg)
"Write an interactive function with an optional argument that tests
whether its argument, a number, is greater than or equal to, or else,
less than the value of `fill-column', and tells you which, in a
message.  However, if you do not pass an argument to the function, use
56 as a default value."
(interactive "p")
(if  (and arg  (not (consp arg)))
    (setq value arg)
    (setq value 56))
(cond ((> arg fill-column)     (message "%s"  "arg value is bigger than 'fill-column"))
           ((< arg fill-column)     (message "%s"  "arg value is smaller than 'fill-column"))
	    ((= arg fill-column)     (message "%s"  "arg value is equal to 'fill-column"))))
